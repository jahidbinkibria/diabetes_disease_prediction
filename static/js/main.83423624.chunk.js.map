{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["tf","require","App","useState","model","setModel","prag","setPrag","glu","setGlu","blo","setBlo","ski","setSki","ins","setIns","bmi","setBmi","dia","setDia","age","setAge","output","setOutput","main_xs","main_ys","pima_data","map","data","col","Pregnancies","Glucose","BloodPressure","SkinThickness","Insulin","BMI","DiabetesPedigreeFunction","Age","push","Outcome","xs_","tensor2d","ys_","tensor1d","train","a","sequential","add","layers","dense","units","activation","inputShape","compile","optimizer","loss","randomNormal","fit","epochs","callbacks","onEpochEnd","epoch","log","console","className","onClick","type","onSubmit","e","preventDefault","pred","predict","Number","print","then","da","result","Array","from","res","Math","round","value","onChange","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.83423624.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport pima_data from './data/diabetes.json';\nconst tf = require('@tensorflow/tfjs');\n\nfunction App() {\n\n  const [model, setModel] = useState(null);\n  // const [ys, setYs] = useState(null);\n\n  const [prag, setPrag] = useState('');\n  const [glu, setGlu] = useState('');\n  const [blo, setBlo] = useState('');\n  const [ski, setSki] = useState('');\n  const [ins, setIns] = useState('');\n  const [bmi, setBmi] = useState('');\n  const [dia, setDia] = useState('');\n  const [age, setAge] = useState('');\n\n  const [output, setOutput] = useState('');\n\n\n  const main_xs = [];\n  const main_ys = [];\n\n\n\n  pima_data.map((data) => {\n\n    let col = [data.Pregnancies, data.Glucose, data.BloodPressure,\n    data.SkinThickness, data.Insulin, data.BMI, data.DiabetesPedigreeFunction, data.Age];\n\n    main_xs.push(col);\n    main_ys.push(data.Outcome);\n\n  });\n\n  // console.log(main_xs.length);\n\n  // setXs(main_xs);\n  // setYs(main_ys);\n\n  // const aa = [[1, 2], [2, 3]];\n  const xs_ = tf.tensor2d(main_xs, [768, 8]);\n  const ys_ = tf.tensor1d(main_ys);\n  // console.log(main_xs);\n  // const ys_ = tf.constraints(main_ys);\n\n  const train = async () => {\n\n    // Train a simple model:\n    const model = tf.sequential();\n    model.add(tf.layers.dense({ units: 100, activation: 'relu', inputShape: [8] }));\n    model.add(tf.layers.dense({ units: 1, activation: 'linear' }));\n    model.compile({ optimizer: 'adam', loss: 'meanSquaredError' });\n\n\n    const xs = tf.randomNormal([100, 10]);\n    const ys = tf.randomNormal([100, 1]);\n\n    let epo = 0;\n\n\n    await model.fit(xs_, ys_, {\n      epochs: 100,\n      callbacks: {\n        onEpochEnd: (epoch, log) => { console.log(`Epoch ${epoch}: loss = ${log.loss}`); epo = epoch; }\n      }\n    });\n\n    setModel(model);\n\n  }\n\n\n  const handle_prag = (e) => {\n    setPrag(e.target.value);\n\n  }\n\n  const handle_glu = (e) => {\n    setGlu(e.target.value);\n  }\n\n  const handle_blo = (e) => {\n    setBlo(e.target.value);\n  }\n\n  const handle_ski = (e) => {\n    setSki(e.target.value);\n  }\n\n  const handle_ins = (e) => {\n    setIns(e.target.value);\n  }\n\n  const handle_bmi = (e) => {\n    setBmi(e.target.value);\n  }\n\n  const handle_dia = (e) => {\n    setDia(e.target.value);\n  }\n\n  const handle_age = (e) => {\n    setAge(e.target.value);\n\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const pred = model.predict(tf.tensor2d([Number(prag), Number(glu), Number(blo), Number(ski), Number(ins), Number(bmi), Number(dia), Number(age)], [1, 8]));\n    pred.print();\n    \n    pred.data().then(function (da) {\n     let result = Array.from(da)\n      let res = Math.round(result[0])\n      \n      if(res === 1){\n        setOutput(\"Yes\");\n      }else{\n        setOutput(\"No\");\n      }\n\n    })\n\n  }\n\n  return (\n    <div className=\"container\">\n\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          <p>Please Train the model least one time before the test</p>\n          <button onClick={train} type=\"button\" className=\"button\">Start Training</button>\n        </div>\n      </div>\n\n\n      <div className=\"row\">\n\n        <form onSubmit={handleSubmit}>\n\n          <div className=\"form-group col-md-12\">\n            <label>Pregnancies:</label>\n            <input type=\"number\" value={prag} onChange={handle_prag} />\n          </div>\n\n          <div className=\"form-group col-md-12\">\n            <label> Glucose:</label>\n              <input type=\"number\" value={glu} onChange={handle_glu} />\n          </div>\n\n          <div className=\"form-group col-md-12\">\n            <label>BloodPressure:</label>\n              <input type=\"number\" value={blo} onChange={handle_blo} />\n          </div>\n\n           <div className=\"form-group col-md-12\">\n            <label>SkinThickness:</label>\n              \n            <input type=\"number\" value={ski} onChange={handle_ski} />\n          </div>\n\n           <div className=\"form-group col-md-12\">\n            <label>Insulin:</label>\n              \n            <input type=\"number\" value={ins} onChange={handle_ins} />\n          </div>\n\n           <div className=\"form-group col-md-12\">\n            <label>BMI:</label>\n              \n            <input type=\"number\" value={bmi} onChange={handle_bmi} />\n          </div>\n           <div className=\"form-group col-md-12\">\n            <label>DiabetesPedigreeFunction:</label>\n              \n            <input type=\"number\" value={dia} onChange={handle_dia} />\n\n          </div>\n           <div className=\"form-group col-md-12\">\n            <label>Age:</label>\n            \n            <input type=\"number\" value={age} onChange={handle_age} />\n          </div>\n\n          <input type=\"submit\" value=\"Test\" className=\"button text-center\"/>\n      </form>\n\n      </div>\n\n      <p>Do I have diabetes?:  {output}</p>\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}